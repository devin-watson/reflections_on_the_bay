@mixin bgImg(
  $image,
  $direction: to bottom,
  $opacitySt: 0,
  $opacityEnd: 0,
  $bgPos: center center
  ) {
  background: linear-gradient(
    $direction,
    rgba(0,0,0, $opacitySt),
    rgba(0,0,0, $opacityEnd)
  ),url($image);
  background-repeat: no-repeat;
  background-position: $bgPos; 
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}//backImg

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  } //before, after
  &:after {
    clear: both;
  } //after
} //clearfix

@mixin translateX($x) {
  -o-transform: translateX($x);
  -moz-transform: translateX($x);
  -ms-transform: translateX($x);
  -webkit-transform: translateX($x);
  transform: translateX($x);
}

@mixin transition-transform() {
  -o-transition: -o-transform ease-in 0.2s;
  -moz-transition: -moz-transform ease-in 0.2s;
  -ms-transition: -moz-transform ease-in 0.2s;
  -webkit-transition: -webkit-transform ease-in 0.2s;
  transition: transform ease-in 0.2s;
}

@mixin scale($scale-x: $default-scale-x, $scale-y: $scale-x, $perspective: false, $only3d: false) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective {
    $trans: perspective($perspective) $trans;
  }
  @include transform($trans, $only3d);
}

@mixin transition($transitions...) {
  $default: (compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay),);
  $transitions: if(length($transitions) == 1 and type-of(nth($transitions, 1)) == list and list-separator(nth($transitions, 1)) == comma, nth($transitions, 1), $transitions);
  $transitions: set-arglist-default($transitions, $default);
  @include with-each-prefix(css-transitions, $transition-support-threshold) {
    $delays: comma-list();
    $transitions-without-delays: comma-list();
    $transitions-with-delays: comma-list();
    $has-delays: false;
    // This block can be made considerably simpler at the point in time that
    // we no longer need to deal with the differences in how delays are treated.
    @each $transition in $transitions {
      // Declare initial values for transition
      $transition: transition-map($transition);
      $property: map-get($transition, property);
      $duration: map-get($transition, duration);
      $timing-function: map-get($transition, timing-function);
      $delay: map-get($transition, delay);
      // Parse transition string to assign values into correct variables
      $has-delays: $has-delays or $delay;
      @if $current-prefix == -webkit {
        // Keep a list of delays in case one is specified
        $delays: append($delays, if($delay, $delay, 0s));
        $transitions-without-delays: append($transitions-without-delays, prefixed-for-transition($current-prefix, $property) $duration $timing-function);
      }
      @else {
        $transitions-with-delays: append($transitions-with-delays, prefixed-for-transition($current-prefix, $property) $duration $timing-function $delay);
      }
    }
    @if $current-prefix == -webkit {
      @include prefix-prop(transition, $transitions-without-delays);
      @if $has-delays {
        @include prefix-prop(transition-delay, $delays);
      }
    }
    @else if $current-prefix {
      @include prefix-prop(transition, $transitions-with-delays);
    }
    @else {
      transition: $transitions-with-delays;
    }
  }
}

@mixin grayscale_element($value) {
    -webkit-filter: #{"grayscale(#{$value})"};
    -moz-filter: #{"grayscale(#{$value})"};
    filter:#{"grayscale(#{$value})"};
}

.grayscale {
    @include grayscale_element(100%);
    transition: all 200ms ease-in-out;
    &:hover {
        @include grayscale_element(0);
    }
}


@mixin skew(
  $width,
  $height) {

  $value: $height / $width;
  -o-transform: translateX($value * 1deg);
  -moz-transform: translateX($value * 1deg);
  -ms-transform: translateX($value * 1deg);
  -webkit-transform: translateX($value * 1deg);
  transform: translateX($value * 1deg);
}


